# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.database import Purchasesx, Refillx, Userx
from tgbot.keyboards.inline_admin import profile_edit_return_finl, mail_confirm_finl
from tgbot.utils.const_functions import is_number, to_number, del_message, ded, clear_html, convert_date
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import upload_text, functions_mail_make
from tgbot.utils.text_functions import open_profile_admin, refill_open_admin, purchase_open_admin

router = Router(name=__name__)


# –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤ –∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def functions_find(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await state.set_state("here_find")
    await message.answer("<b>üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏/–ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞</b>")


# –†–∞—Å—Å—ã–ª–∫–∞
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def functions_mail(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await state.set_state("here_mail_message")
    await message.answer(
        "<b>üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n"
        "‚ùï –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–æ—Å—Ç—ã —Å –ª—é–±—ã–º–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏",
    )


################################################################################
################################### –†–ê–°–°–´–õ–ö–ê ###################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(StateFilter("here_mail_message"))
async def functions_mail_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.update_data(here_mail_message=message)
    await state.set_state("here_mail_confirm")

    get_users = Userx.get_all()

    await message.reply(
        f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç?</b>",
        reply_markup=mail_confirm_finl(),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("mail_confirm:"), StateFilter("here_mail_confirm"))
async def functions_mail_confirm(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_status = call.data.split(":")[1]

    send_message = (await state.get_data())['here_mail_message']
    await state.clear()

    if get_status == "Yes":
        get_users = Userx.get_all()

        await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(get_users)})</b>")

        await asyncio.create_task(functions_mail_make(bot, send_message, call))
    else:
        await call.message.edit_text("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>")


################################################################################
##################################### –ü–û–ò–°–ö ####################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏/–ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@router.message(F.text, StateFilter("here_find"))
@router.message(F.text.lower().startswith(('.find', 'find')))
async def functions_find_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    find_data = message.text.lower()

    if ".find" in find_data or "find" in find_data:
        if len(find_data.split(" ")) >= 2:
            if ".find" in find_data or "find" in find_data:
                find_data = message.text.split(" ")[1]
        else:
            return await message.answer(
                "<b>‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
                "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏/–ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞",
            )

    if find_data.startswith("@") or find_data.startswith("#"):
        find_data = find_data[1:]

    if find_data.isdigit():
        get_user = Userx.get(user_id=find_data)
    else:
        get_user = Userx.get(user_login=find_data.lower())

    get_refill = Refillx.get(refill_receipt=find_data)
    get_purchase = Purchasesx.get(purchase_receipt=find_data)

    if get_user is None and get_refill is None and get_purchase is None:
        return await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã</b>\n"
            "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏/–ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞",
        )

    await state.clear()

    if get_user is not None:
        return await open_profile_admin(bot, message.from_user.id, get_user)

    if get_refill is not None:
        return await refill_open_admin(bot, message.from_user.id, get_refill)

    if get_purchase is not None:
        return await purchase_open_admin(bot, arSession, message.from_user.id, get_purchase)


################################################################################
############################## –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–ï–ú #############################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("admin_user_refresh:"))
async def functions_user_refresh(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    user_id = int(call.data.split(":")[1])

    get_user = Userx.get(user_id=user_id)

    await state.clear()

    await del_message(call.message)
    await open_profile_admin(bot, call.from_user.id, get_user)


# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("admin_user_purchases:"))
async def functions_user_purchases(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    user_id = int(call.data.split(":")[1])

    get_user = Userx.get(user_id=user_id)
    get_purchases = Purchasesx.gets(user_id=user_id)[-10:]

    if len(get_purchases) < 1:
        return await call.answer("‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)

    await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫")
    await del_message(call.message)

    for purchase in get_purchases:
        link_items = await upload_text(arSession, purchase.purchase_data)

        await call.message.answer(
            ded(f"""
                <b>üßæ –ß–µ–∫: <code>#{purchase.purchase_receipt}</code></b>
                üéÅ –¢–æ–≤–∞—Ä: <code>{purchase.purchase_position_name} | {purchase.purchase_count}—à—Ç | {purchase.purchase_price}‚ÇΩ</code>
                üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{convert_date(purchase.purchase_unix)}</code>
                üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
            """)
        )

        await asyncio.sleep(0.2)

    await open_profile_admin(bot, call.from_user.id, get_user)


# –í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data.startswith("admin_user_balance_add:"))
async def functions_user_balance_add(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    user_id = int(call.data.split(":")[1])

    await state.update_data(here_user=user_id)
    await state.set_state("here_user_add")

    await call.message.edit_text(
        "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞</b>",
        reply_markup=profile_edit_return_finl(user_id),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(F.text, StateFilter("here_user_add"))
async def functions_user_balance_add_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    user_id = (await state.get_data())['here_user']

    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ</b>\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞",
            reply_markup=profile_edit_return_finl(user_id),
        )

    get_amount = to_number(message.text)

    if get_amount <= 0 or get_amount > 1_000_000_000:
        return await message.answer(
            "<b>‚ùå –°—É–º–º–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –∏ –±–æ–ª—å—à–µ 1 000 000 000</b>\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞",
            reply_markup=profile_edit_return_finl(user_id),
        )

    await state.clear()

    get_user = Userx.get(user_id=user_id)
    Userx.update(
        user_id,
        user_balance=round(get_user.user_balance + get_amount, 2),
        user_give=round(get_user.user_give + get_amount, 2),
    )

    try:
        await bot.send_message(
            user_id,
            f"<b>üí∞ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ <code>{message.text}‚ÇΩ</code></b>",
        )
    except:
        ...

    await message.answer(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
        f"üí∞ –í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞: <code>{message.text}‚ÇΩ</code> | <code>{get_user.user_balance}</code> -> <code>{round(get_user.user_balance + get_amount, 2)}‚ÇΩ</code>"
    )

    get_user = Userx.get(user_id=user_id)
    await open_profile_admin(bot, message.from_user.id, get_user)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data.startswith("admin_user_balance_set:"))
async def functions_user_balance_set(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    user_id = int(call.data.split(":")[1])

    await state.update_data(here_user=user_id)
    await state.set_state("here_user_set")

    await call.message.edit_text(
        "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>",
        reply_markup=profile_edit_return_finl(user_id),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text, StateFilter("here_user_set"))
async def functions_user_balance_set_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    user_id = (await state.get_data())['here_user']

    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ</b>\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
            reply_markup=profile_edit_return_finl(user_id),
        )

    get_amount = to_number(message.text)

    if get_amount < -1_000_000_000 or get_amount > 1_000_000_000:
        return await message.answer(
            "<b>‚ùå –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ (-)1 000 000 000</b>\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
            reply_markup=profile_edit_return_finl(user_id),
        )

    await state.clear()

    get_user = Userx.get(user_id=user_id)

    if get_amount > get_user.user_balance:
        user_give = get_amount - get_user.user_give
    else:
        user_give = 0

    Userx.update(
        user_id,
        user_balance=get_amount,
        user_give=round(get_user.user_give + user_give, 2),
    )

    await message.answer(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
        f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞: <code>{message.text}‚ÇΩ</code> | <code>{get_user.user_balance}</code> -> <code>{get_amount}‚ÇΩ</code>"
    )

    get_user = Userx.get(user_id=user_id)
    await open_profile_admin(bot, message.from_user.id, get_user)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data.startswith("admin_user_message:"))
async def functions_user_user_message(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    user_id = int(call.data.split(":")[1])

    await state.update_data(here_user_id=user_id)
    await state.set_state("here_user_message")

    await call.message.edit_text(
        "<b>üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        reply_markup=profile_edit_return_finl(user_id),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(F.text, StateFilter("here_user_message"))
async def functions_user_user_message_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    user_id = (await state.get_data())['here_user_id']
    await state.clear()

    get_message = "<b>üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n" + f"<code>{clear_html(message.text)}</code>"
    get_user = Userx.get(user_id=user_id)

    try:
        await bot.send_message(user_id, get_message)
    except:
        await message.reply("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>")
    else:
        await message.reply("<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</b>")

    await open_profile_admin(bot, message.from_user.id, get_user)
